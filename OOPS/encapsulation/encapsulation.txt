
Encapsulation in Python is the practice of bundling data (attributes) and methods (functions)
that operate on the data into a single unit, typically a class. It also involves restricting
direct access to some components of the object, exposing only the necessary interface to
interact with it.

Python supports encapsulation through access modifiers:
-------------------------------------------------------


1. Public Members: Accessible from anywhere.
2. Protected Members: Indicated by a single underscore `_`, intended for internal use but
   accessible outside the class with a warning.
3. Private Members: Indicated by a double underscore `__`, accessible only within the class.

_______________________________________________________________________________________________

Key Features of Encapsulation in Python
---------------------------------------

1. Data Hiding:
   - Prevents direct modification of attributes from outside the class.
   - Ensures data integrity by controlling how attributes are accessed and modified.

2. Controlled Access:
   - Provides access to private/protected attributes through getter and setter methods.
   - Allows implementation of logic during attribute access or modification.

3. Improved Maintainability:
   - Encapsulation helps in creating modular code, making it easier to maintain and debug.

_______________________________________________________________________________________________

Key Points About Access Modifiers
---------------------------------

1. Public Attributes:
   - Accessible directly without restrictions.
   - Example: `self.name`.

2. Protected Attributes:
   - Indicated with a single leading underscore (`_`).
   - Can be accessed outside the class but should be treated as internal.
   - Example: `self._department`.

3. Private Attributes:
   - Indicated with a double leading underscore (`__`).
   - Name mangling occurs, making it harder to access directly (e.g., `self.__salary` becomes `_ClassName__salary`).
   - Example: `self.__salary`.

_______________________________________________________________________________________________

Advantages of Encapsulation in Python
-------------------------------------

1. Data Security:
   - Prevents unauthorized access to attributes.
2. Abstraction:
   - Hides implementation details and exposes only the required functionality.
3. Flexibility:
   - Allows controlled modification of data through methods (getters and setters).
4. Code Maintainability:
   - Makes code modular and easier to debug.
